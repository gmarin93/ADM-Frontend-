{"ast":null,"code":"var _jsxFileName = \"/home/gmarin/Software/MERN/cliente/src/context/proyectos/proyectoState.js\";\nimport React, { useReducer } from 'react';\nimport proyectoContext from './proyectoContext';\nimport proyectoReducer from './proyectoReducer';\nimport { FORMULARIO_PROYECTO, OBTENER_PROYECTOS } from '../../types'; // El archivo dentro de types al llamarse index.js no necesita llamarse types/index.js, así como está funciona\n\nconst proyectos = [{\n  id: 1,\n  nombre: 'Tienda Virtual'\n}, {\n  id: 2,\n  nombre: 'Intranet'\n}, {\n  id: 3,\n  nombre: 'Diseño de sitio'\n}, {\n  id: 4,\n  nombre: 'MERN'\n}];\n\nconst ProyectoState = props => {\n  const initialState = {\n    formulario: false,\n    proyectos: []\n  };\n  const [state, dispatch] = useReducer(proyectoReducer, initialState);\n\n  const mostrarFormulario = () => {\n    dispatch({\n      type: FORMULARIO_PROYECTO\n    });\n  };\n\n  const obtenerProyectos = proyectos => {\n    dispatch({\n      type: OBTENER_PROYECTOS,\n      payload\n    });\n  }; // Es recomendable manejar los datos del state y luego las funciones en el value del context\n\n\n  return /*#__PURE__*/React.createElement(proyectoContext.Provider, {\n    value: {\n      proyectos: state.proyectos,\n      formulario: state.formulario,\n      mostrarFormulario\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default ProyectoState;","map":{"version":3,"sources":["/home/gmarin/Software/MERN/cliente/src/context/proyectos/proyectoState.js"],"names":["React","useReducer","proyectoContext","proyectoReducer","FORMULARIO_PROYECTO","OBTENER_PROYECTOS","proyectos","id","nombre","ProyectoState","props","initialState","formulario","state","dispatch","mostrarFormulario","type","obtenerProyectos","payload","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SACIC,mBADJ,EAEIC,iBAFJ,QAE4B,aAF5B,C,CAGA;;AAGA,MAAMC,SAAS,GAAC,CACZ;AAAEC,EAAAA,EAAE,EAAC,CAAL;AAAQC,EAAAA,MAAM,EAAE;AAAhB,CADY,EAEZ;AAACD,EAAAA,EAAE,EAAC,CAAJ;AAAOC,EAAAA,MAAM,EAAE;AAAf,CAFY,EAGZ;AAACD,EAAAA,EAAE,EAAC,CAAJ;AAAOC,EAAAA,MAAM,EAAE;AAAf,CAHY,EAIZ;AAACD,EAAAA,EAAE,EAAC,CAAJ;AAAOC,EAAAA,MAAM,EAAE;AAAf,CAJY,CAAhB;;AAOA,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAE3B,QAAMC,YAAY,GAAC;AACfC,IAAAA,UAAU,EAAC,KADI;AAEfN,IAAAA,SAAS,EAAC;AAFK,GAAnB;AAKA,QAAM,CAACO,KAAD,EAAOC,QAAP,IAAiBb,UAAU,CAACE,eAAD,EAAiBQ,YAAjB,CAAjC;;AAEA,QAAMI,iBAAiB,GAAE,MAAK;AAC1BD,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAACZ;AADA,KAAD,CAAR;AAGH,GAJD;;AAMA,QAAMa,gBAAgB,GAACX,SAAS,IAAE;AAC9BQ,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAACX,iBADA;AAELa,MAAAA;AAFK,KAAD,CAAR;AAIH,GALD,CAf2B,CAsB3B;;;AACA,sBACI,oBAAC,eAAD,CAAiB,QAAjB;AACA,IAAA,KAAK,EAAE;AACHZ,MAAAA,SAAS,EAACO,KAAK,CAACP,SADb;AAEHM,MAAAA,UAAU,EAACC,KAAK,CAACD,UAFd;AAGHG,MAAAA;AAHG,KADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQKL,KAAK,CAACS,QARX,CADJ;AAYH,CAnCD;;AAsCA,eAAeV,aAAf","sourcesContent":["import React, { useReducer } from 'react';\nimport proyectoContext from './proyectoContext';\nimport proyectoReducer from './proyectoReducer';\nimport {\n    FORMULARIO_PROYECTO,\n    OBTENER_PROYECTOS} from '../../types';\n// El archivo dentro de types al llamarse index.js no necesita llamarse types/index.js, así como está funciona\n\n\nconst proyectos=[\n    { id:1, nombre: 'Tienda Virtual' },\n    {id:2, nombre: 'Intranet' },\n    {id:3, nombre: 'Diseño de sitio' },\n    {id:4, nombre: 'MERN' }\n]\n\nconst ProyectoState = props => {\n\n    const initialState={\n        formulario:false,\n        proyectos:[]\n    }\n\n    const [state,dispatch]=useReducer(proyectoReducer,initialState);\n\n    const mostrarFormulario= () =>{\n        dispatch({\n            type:FORMULARIO_PROYECTO\n        })\n    }\n\n    const obtenerProyectos=proyectos=>{\n        dispatch({\n            type:OBTENER_PROYECTOS,\n            payload\n        })\n    }\n\n    // Es recomendable manejar los datos del state y luego las funciones en el value del context\n    return (\n        <proyectoContext.Provider\n        value={{\n            proyectos:state.proyectos,\n            formulario:state.formulario,\n            mostrarFormulario\n        \n        }}\n        >\n            {props.children}\n        </proyectoContext.Provider>\n    );\n};\n\n\nexport default ProyectoState;"]},"metadata":{},"sourceType":"module"}