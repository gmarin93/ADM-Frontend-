{"ast":null,"code":"var _jsxFileName = \"/home/gmarin/Software/MERN/cliente/src/context/proyectos/proyectoState.js\";\nimport React, { useReducer } from 'react';\nimport proyectoContext from './proyectoContext';\nimport proyectoReducer from './proyectoReducer';\nimport { FORMULARIO_PROYECTO } from '../../types'; // El archivo dentro de types al llamarse index.js no necesita llamarse types/index.js, así como está funciona\n\nconst ProyectoState = props => {\n  const initialState = {\n    formulario: false,\n    proyectos: [{\n      id: 1,\n      nombre: 'Tienda Virtual'\n    }, {\n      id: 2,\n      nombre: 'Intranet'\n    }, {\n      id: 3,\n      nombre: 'Diseño de sitio'\n    }]\n  };\n  const [state, dispatch] = useReducer(proyectoReducer, initialState);\n\n  const mostrarFormulario = () => {\n    dispatch({\n      type: FORMULARIO_PROYECTO\n    });\n  }; // Es recomendable manejar los datos del state y luego las funciones en el value del context\n\n\n  return /*#__PURE__*/React.createElement(proyectoContext.Provider, {\n    value: {\n      proyectos: state.proyectos,\n      formulario: state.formulario,\n      mostrarFormulario\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default ProyectoState;","map":{"version":3,"sources":["/home/gmarin/Software/MERN/cliente/src/context/proyectos/proyectoState.js"],"names":["React","useReducer","proyectoContext","proyectoReducer","FORMULARIO_PROYECTO","ProyectoState","props","initialState","formulario","proyectos","id","nombre","state","dispatch","mostrarFormulario","type","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAAQC,mBAAR,QAAkC,aAAlC,C,CACA;;AAEA,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAE3B,QAAMC,YAAY,GAAC;AACfC,IAAAA,UAAU,EAAC,KADI;AAEfC,IAAAA,SAAS,EAAC,CACV;AAAEC,MAAAA,EAAE,EAAC,CAAL;AAAQC,MAAAA,MAAM,EAAE;AAAhB,KADU,EAEV;AAACD,MAAAA,EAAE,EAAC,CAAJ;AAAOC,MAAAA,MAAM,EAAE;AAAf,KAFU,EAGV;AAACD,MAAAA,EAAE,EAAC,CAAJ;AAAOC,MAAAA,MAAM,EAAE;AAAf,KAHU;AAFK,GAAnB;AASA,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAiBZ,UAAU,CAACE,eAAD,EAAiBI,YAAjB,CAAjC;;AAEA,QAAMO,iBAAiB,GAAE,MAAK;AAC1BD,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAACX;AADA,KAAD,CAAR;AAGH,GAJD,CAb2B,CAmB3B;;;AACA,sBACI,oBAAC,eAAD,CAAiB,QAAjB;AACA,IAAA,KAAK,EAAE;AACHK,MAAAA,SAAS,EAACG,KAAK,CAACH,SADb;AAEHD,MAAAA,UAAU,EAACI,KAAK,CAACJ,UAFd;AAGHM,MAAAA;AAHG,KADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQKR,KAAK,CAACU,QARX,CADJ;AAYH,CAhCD;;AAmCA,eAAeX,aAAf","sourcesContent":["import React, { useReducer } from 'react';\nimport proyectoContext from './proyectoContext';\nimport proyectoReducer from './proyectoReducer';\nimport {FORMULARIO_PROYECTO} from '../../types';\n// El archivo dentro de types al llamarse index.js no necesita llamarse types/index.js, así como está funciona\n\nconst ProyectoState = props => {\n\n    const initialState={\n        formulario:false,\n        proyectos:[\n        { id:1, nombre: 'Tienda Virtual' },\n        {id:2, nombre: 'Intranet' },\n        {id:3, nombre: 'Diseño de sitio' }\n    ]\n    }\n\n    const [state,dispatch]=useReducer(proyectoReducer,initialState);\n\n    const mostrarFormulario= () =>{\n        dispatch({\n            type:FORMULARIO_PROYECTO\n        })\n    }\n\n    // Es recomendable manejar los datos del state y luego las funciones en el value del context\n    return (\n        <proyectoContext.Provider\n        value={{\n            proyectos:state.proyectos,\n            formulario:state.formulario,\n            mostrarFormulario\n        \n        }}\n        >\n            {props.children}\n        </proyectoContext.Provider>\n    );\n};\n\n\nexport default ProyectoState;"]},"metadata":{},"sourceType":"module"}