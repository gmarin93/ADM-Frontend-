{"ast":null,"code":"var _jsxFileName = \"/home/gmarin/Software/MERN/cliente/src/context/proyectos/proyectoState.js\";\nimport React, { useReducer } from 'react';\nimport proyectoContext from './proyectoContext';\nimport proyectoReducer from './proyectoReducer';\nimport { FORMULARIO_PROYECTO, OBTENER_PROYECTOS, AGREGAR_PROYECTO } from '../../types';\nimport uuid from 'uuid'; // El archivo dentro de types al llamarse index.js no necesita llamarse types/index.js, así como está funciona\n\nconst ProyectoState = props => {\n  const proyectos = [{\n    id: 1,\n    nombre: 'Tienda Virtual'\n  }, {\n    id: 2,\n    nombre: 'Intranet'\n  }, {\n    id: 3,\n    nombre: 'Diseño de sitio'\n  }, {\n    id: 4,\n    nombre: 'MERN'\n  }];\n  const initialState = {\n    formulario: false,\n    proyectos: []\n  };\n  const [state, dispatch] = useReducer(proyectoReducer, initialState);\n\n  const mostrarFormulario = () => {\n    dispatch({\n      type: FORMULARIO_PROYECTO\n    });\n  };\n\n  const obtenerProyectos = () => {\n    dispatch({\n      type: OBTENER_PROYECTOS,\n      payload: proyectos\n    });\n  };\n\n  const AgregarProyecto = proyecto => {\n    proyecto.id = uuid;\n  }; // Es recomendable manejar los datos del state y luego las funciones en el value del context\n\n\n  return /*#__PURE__*/React.createElement(proyectoContext.Provider, {\n    value: {\n      proyectos: state.proyectos,\n      formulario: state.formulario,\n      mostrarFormulario,\n      obtenerProyectos\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default ProyectoState;","map":{"version":3,"sources":["/home/gmarin/Software/MERN/cliente/src/context/proyectos/proyectoState.js"],"names":["React","useReducer","proyectoContext","proyectoReducer","FORMULARIO_PROYECTO","OBTENER_PROYECTOS","AGREGAR_PROYECTO","uuid","ProyectoState","props","proyectos","id","nombre","initialState","formulario","state","dispatch","mostrarFormulario","type","obtenerProyectos","payload","AgregarProyecto","proyecto","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SACIC,mBADJ,EAEIC,iBAFJ,EAGIC,gBAHJ,QAIO,aAJP;AAKA,OAAOC,IAAP,MAAiB,MAAjB,C,CAEA;;AAEA,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAE3B,QAAMC,SAAS,GAAC,CACZ;AAAEC,IAAAA,EAAE,EAAC,CAAL;AAAQC,IAAAA,MAAM,EAAE;AAAhB,GADY,EAEZ;AAACD,IAAAA,EAAE,EAAC,CAAJ;AAAOC,IAAAA,MAAM,EAAE;AAAf,GAFY,EAGZ;AAACD,IAAAA,EAAE,EAAC,CAAJ;AAAOC,IAAAA,MAAM,EAAE;AAAf,GAHY,EAIZ;AAACD,IAAAA,EAAE,EAAC,CAAJ;AAAOC,IAAAA,MAAM,EAAE;AAAf,GAJY,CAAhB;AAMA,QAAMC,YAAY,GAAC;AACfC,IAAAA,UAAU,EAAC,KADI;AAEfJ,IAAAA,SAAS,EAAC;AAFK,GAAnB;AAKA,QAAM,CAACK,KAAD,EAAOC,QAAP,IAAiBf,UAAU,CAACE,eAAD,EAAiBU,YAAjB,CAAjC;;AAEA,QAAMI,iBAAiB,GAAE,MAAK;AAC1BD,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAACd;AADA,KAAD,CAAR;AAGH,GAJD;;AAMA,QAAMe,gBAAgB,GAAC,MAAI;AACvBH,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAACb,iBADA;AAELe,MAAAA,OAAO,EAACV;AAFH,KAAD,CAAR;AAIH,GALD;;AAOA,QAAMW,eAAe,GAACC,QAAQ,IAAE;AAC5BA,IAAAA,QAAQ,CAACX,EAAT,GAAYJ,IAAZ;AACH,GAFD,CA5B2B,CAgC3B;;;AACA,sBACI,oBAAC,eAAD,CAAiB,QAAjB;AACA,IAAA,KAAK,EAAE;AACHG,MAAAA,SAAS,EAACK,KAAK,CAACL,SADb;AAEHI,MAAAA,UAAU,EAACC,KAAK,CAACD,UAFd;AAGHG,MAAAA,iBAHG;AAIHE,MAAAA;AAJG,KADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASKV,KAAK,CAACc,QATX,CADJ;AAaH,CA9CD;;AAiDA,eAAef,aAAf","sourcesContent":["import React, { useReducer } from 'react';\nimport proyectoContext from './proyectoContext';\nimport proyectoReducer from './proyectoReducer';\nimport {\n    FORMULARIO_PROYECTO,\n    OBTENER_PROYECTOS,\n    AGREGAR_PROYECTO\n} from '../../types';\nimport uuid from 'uuid';\n\n// El archivo dentro de types al llamarse index.js no necesita llamarse types/index.js, así como está funciona\n\nconst ProyectoState = props => {\n    \n    const proyectos=[\n        { id:1, nombre: 'Tienda Virtual' },\n        {id:2, nombre: 'Intranet' },\n        {id:3, nombre: 'Diseño de sitio' },\n        {id:4, nombre: 'MERN' }\n    ]\n    const initialState={\n        formulario:false,\n        proyectos:[]\n    }\n\n    const [state,dispatch]=useReducer(proyectoReducer,initialState);\n\n    const mostrarFormulario= () =>{\n        dispatch({\n            type:FORMULARIO_PROYECTO\n        })\n    }\n\n    const obtenerProyectos=()=>{\n        dispatch({\n            type:OBTENER_PROYECTOS,\n            payload:proyectos\n        })\n    }\n\n    const AgregarProyecto=proyecto=>{\n        proyecto.id=uuid\n    }\n\n    // Es recomendable manejar los datos del state y luego las funciones en el value del context\n    return (\n        <proyectoContext.Provider\n        value={{\n            proyectos:state.proyectos,\n            formulario:state.formulario,\n            mostrarFormulario,\n            obtenerProyectos\n        \n        }}\n        >\n            {props.children}\n        </proyectoContext.Provider>\n    );\n};\n\n\nexport default ProyectoState;"]},"metadata":{},"sourceType":"module"}